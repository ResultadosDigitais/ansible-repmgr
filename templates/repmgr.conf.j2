###################################################
# Replication Manager sample configuration file
###################################################

# Some configuration items will be set with a default value; this
# is noted for each item. Where no default value is shown, the
# parameter will be treated as empty or false.

# Required configuration items
# ============================
#
# repmgr and repmgrd require these items to be configured:

# Node ID and name
# (Note: we recommend to avoid naming nodes after their initial
#  replication function, as this will cause confusion when e.g.
#  "standby2" is promoted to primary)
node_id={{ repmgr_node_id | mandatory }}           # a unique integer
node_name={{ repmgr_node_name }}  # an arbitrary (but unique) string; we recommend using
                 # the server's hostname or another identifier unambiguously
                 # associated with the server to avoid confusion

# Database connection information as a conninfo string (this must be a
# keyword/value string, not a connection URI).
#
#   https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
#
# All servers in the cluster must be able to access the database
# using this connection string.
#
conninfo='{{ repmgr_conninfo }}'
#
# If repmgrd is in use, consider explicitly setting `connect_timeout` in the
# conninfo string to determine the length of time which elapses before
# a network connection attempt is abandoned; for details see:
#
#   https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNECT-CONNECT-TIMEOUT


data_directory='{{ repmgr_data_directory }}' # The node's data directory. This is needed by repmgr
				 # when performing operations when the PostgreSQL instance
				 # is not running and there's no other way of determining
				 # the data directory.

# Optional configuration items
# ============================

# Replication settings
# ---------------------

# When using cascading replication, a standby can connect to another
# upstream standby node which is specified by setting 'upstream_node'.
# In that case, the upstream node must exist before the new standby
# can be registered. If 'upstream_node' is not set, then the standby
# will connect directly to the primary node.
{% if repmgr_upstream_node is defined %}
upstream_node={{ repmgr_upstream_node }}
{% endif %}

# use physical replication slots - PostgreSQL 9.4 and later only
# (default: 0)
use_replication_slots={% if repmgr_use_replication_slots | bool %}1{% else %}0{% endif %}

# NOTE: 'max_replication_slots' should be configured for at least the
# number of standbys which will connect to the primary.

# Logging and monitoring settings
# -------------------------------

# Log level: possible values are DEBUG, INFO, NOTICE, WARNING, ERR, ALERT, CRIT or EMERG
# (default: NOTICE)
log_level={{ repmgr_log_level }}

# Note that logging facility settings will only apply to `repmgrd` by default;
# `repmgr` will always write to STDERR unless the switch `--log-to-file` is
# supplied, in which case it will log to the same destination as `repmgrd`.
# This is mainly intended for those cases when `repmgr` is executed directly
# by `repmgrd`.

# Logging facility: possible values are STDERR or - for Syslog integration - one of LOCAL0, LOCAL1, ..., LOCAL7, USER
# (default: STDERR)
log_facility='{{ repmgr_log_facility }}'

# stderr can be redirected to an arbitrary file:
#
{% if repmgr_log_file is defined %}
log_file='{{ repmgr_log_file }}'
{% endif %}

# event notifications can be passed to an arbitrary external program
# together with the following parameters:
#
#   %n - node ID
#   %e - event type
#   %s - success (1 or 0)
#   %t - timestamp
#   %d - details
#
# the values provided for "%t" and "%d" will probably contain spaces,
# so should be quoted in the provided command configuration, e.g.:
#
event_notification_command='{{ repmgr_event_notification_command }}'

# By default, all notifications will be passed; the notification types
# can be filtered to explicitly named ones:
#
{% if repmgr_event_notifications %}
event_notifications='{{ repmgr_event_notifications | join(',') }}'
{% endif %}


# Environment/command settings
# ----------------------------

# path to PostgreSQL binary directory (location of pg_ctl, pg_basebackup etc.)
# (if not provided, defaults to system $PATH)
#pg_bindir=/usr/bin/
{% if repmgr_pg_bindir is defined %}
pg_bindir='{{ repmgr_pg_bindir }}'
{% endif %}

#
# Debian/Ubuntu users: you will probably need to set this to the directory
# where `pg_ctl` is located, e.g. /usr/lib/postgresql/9.5/bin/

# service control commands
#
# repmgr provides options to override the default pg_ctl commands
# used to stop, start, restart, reload and promote the PostgreSQL cluster
#
# NOTE: These commands must be runnable on remote nodes as well for switchover
# to function correctly.
#
# If you use sudo, the user repmgr runs as (usually 'postgres')  must have
# passwordless sudo access to execute the command
#
# For example, to use systemd, you may use the following configuration:
#
#    # this is required when running sudo over ssh without -t:
#    Defaults:postgres !requiretty
#    postgres ALL = NOPASSWD: /usr/bin/systemctl stop postgresql-9.5, \
#       /usr/bin/systemctl start postgresql-9.5, \
#       /usr/bin/systemctl restart postgresql-9.5
#

service_start_command='{{ repmgr_service_start_command }}'
service_stop_command='{{ repmgr_service_stop_command }}'
service_restart_command='{{ repmgr_service_restart_command }}'
service_reload_command='{{ repmgr_service_reload_command }}'
service_promote_command='{{ repmgr_service_promote_command }}'

# external command options

rsync_options='{{ repmgr_rsync_options }}'
ssh_options='{{ repmgr_ssh_options }}'

# external command arguments. Values shown are examples.

#pg_ctl_options='-s'
#pg_basebackup_options='--label=repmgr_backup'
pg_ctl_options='{{ repmgr_pg_ctl_options }}'
pg_basebackup_options='{{ repmgr_pg_basebackup_options }}'

# Barman options
# ----------------------

{% if repmgr_barman_server is defined %}
barman_server='{{ repmgr_barman_server }}' # The Barman configuration section
{% endif %}
{% if repmgr_barman_host is defined %}
barman_host='{{ repmgr_barman_host }}' # The Barman configuration file on the 
{% endif %}
{% if repmgr_barman_config is defined %}
barman_config='{{ repmgr_barman_config }}' # The Barman configuration file on the
                                           # Barman server (needed if the file is
                                           # in a non-standard location)
{% endif %}

# Standby clone settings
# ----------------------
#
# These settings apply when cloning a standby (`repmgr standby clone`).

# Tablespaces can be remapped from one file system location to another:
#
# tablespace_mapping=/path/to/original/tablespace=/path/to/new/tablespace

# You can specify a restore_command to be used in the recovery.conf that
# will be placed in the cloned standby
#
# restore_command = cp /path/to/archived/wals/%f %p

# Failover settings (repmgrd)
# ---------------------------
#
# These settings are only applied when repmgrd is running. Values shown
# are defaults.

# monitoring interval in seconds; default is 2
monitor_interval_secs={{ repmgr_monitor_interval_secs }}

# Number of attempts at what interval (in seconds) to try and
# connect to  a server to establish its status (e.g. master
# during failover)
reconnect_attempts={{ repmgr_reconnect_attempts }}
reconnect_interval={{ repmgr_reconnect_interval }}

# Autofailover options
failover='{{ repmgr_failover }}' # one of 'automatic', 'manual' (default: manual)
                    # defines the action to take in the event of upstream failure
                    #
                    # 'automatic': repmgrd will automatically attempt to promote the
                    #    node or follow the new upstream node
                    # 'manual': repmgrd will take no action and the mode will require
                    #    manual attention to reattach it to replication

priority={{ repmgr_priority }}  # indicate a preferred priorty for promoting nodes
                                 # a value of zero or less prevents the node being promoted to primary
                                 # (default: 100)

promote_command='{{ repmgr_promote_command }}'
follow_command='{{ repmgr_follow_command }}'

# change wait time for primary; before we bail out and exit when the primary
# disappears, we wait 'reconnect_attempts' * 'retry_promote_interval_secs'
# seconds; by default this would be half an hour, as 'retry_promote_interval_secs'
# default value is 300)
primary_notification_timeout={{ repmgr_primary_notification_timeout }}

witness_sync_interval={{ repmgr_witness_sync_internal }}	 # interval (in seconds) to synchronise node records
				                                                   # to the witness server
